#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 77 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 158 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 150 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 158 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 211 72 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 150 255 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 28 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 2875 0 28 3 6 #"#lang "
0 0 49 3 5 #"plait"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 6 #" Value"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  (numV [n "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Number"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"  (closV [args "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"         [body "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"         [env "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"  (contV [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 4 #" Exp"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  (numE [n "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Number"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 10 #"  (idE [s "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"  (plusE [l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #"] "
0 0 49 29 1 #"\n"
0 0 49 3 12 #"         [r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"  (multE [l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"         [r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 11 #"; negE type"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  (negE [e "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 11 #"; if0E type"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  (if0E [tst "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"        [thn "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"        [els "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 11 #"; avgE type"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  (avgE [l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"        [m "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"        [r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 12 #"  (lamE [ns "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"        [body "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  (appE [fun "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"        [args "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 3 #")])"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  (let/ccE [n "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"           [body "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 8 #" Binding"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  (bind [name "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"        [val "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 17 #"define-type-alias"
0 0 49 3 6 #" Env ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"Binding"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 14 #" mt-env empty)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 17 #" extend-env cons)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 20 #" extend-env* append)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 5 #" Cont"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"  (doneK)"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"  (plusSecondK [r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"               [e "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"               [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  (doPlusK [v "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"           [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 33 #";; waiting for value k for doNegK"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  (doNegK [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"  (multSecondK [r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"               [e "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"               [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  (doMultK [v "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"           [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 7 #";; if0K"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  (if0K [thn "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"        [els "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"        [env "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"        [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 56 #";; doIfK - for evaluating thn and els conditions similar"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 20 #";; similar to doAppK"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"  (doIfK "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"   [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 25 #";; average continue cases"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 37 #";; l is being evaluated for this case"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 32 #";; evaluate the first expression"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"  (avgSecondK [m "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"              [r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"              [e "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"              [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 37 #";; m is being evaluated for this case"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 52 #";; the first expression has already returned a value"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 52 #";; and we now have to evaluate the second expression"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"  (avgThirdK [v-1 "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"             [r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"             [e "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"             [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 37 #";; r is being evaluated for this case"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 43 #";; expressions l and m have returned values"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 51 #";; and we now have to evaluate the third expression"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"  (doAvgK [v-l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"          [v-m "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"          [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  (appArgK [a "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"           [env "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"           [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 22 #"  (continueListK [rst "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                 [v-f "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"                 [vals "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 20 #"                 [e "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 20 #"                 [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  (doAppK [f "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"          [vals "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"          [k "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 17 #"print-only-errors"
0 0 49 3 5 #" #t))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 49 #";; parse ----------------------------------------"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 9 #" (parse ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"S-Exp"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 6 #"NUMBER"
0 0 49 3 5 #" s) ("
0 0 49 3 4 #"numE"
0 0 49 3 20 #" (s-exp->number s))]"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 6 #"SYMBOL"
0 0 49 3 5 #" s) ("
0 0 49 3 3 #"idE"
0 0 49 3 20 #" (s-exp->symbol s))]"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 5 #"plusE"
0 0 49 3 9 #" (parse ("
0 0 49 3 6 #"second"
0 0 49 3 18 #" (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 20 #"            (parse ("
0 0 49 3 5 #"third"
0 0 49 3 20 #" (s-exp->list s))))]"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"; neg parse"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"neg"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 4 #"negE"
0 0 49 3 9 #" (parse ("
0 0 49 3 6 #"second"
0 0 49 3 20 #" (s-exp->list s))))]"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"; if0 parse"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"if0"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 4 #"if0E"
0 0 49 3 9 #" (parse ("
0 0 49 3 6 #"second"
0 0 49 3 18 #" (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"           (parse ("
0 0 49 3 5 #"third"
0 0 49 3 18 #" (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"           (parse ("
0 0 49 3 6 #"fourth"
0 0 49 3 20 #" (s-exp->list s))))]"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 11 #"; avg parse"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"avg"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 4 #"avgE"
0 0 49 3 9 #" (parse ("
0 0 49 3 6 #"second"
0 0 49 3 18 #" (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"           (parse ("
0 0 49 3 5 #"third"
0 0 49 3 18 #" (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"           (parse ("
0 0 49 3 6 #"fourth"
0 0 49 3 20 #" (s-exp->list s))))]"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 5 #"multE"
0 0 49 3 9 #" (parse ("
0 0 49 3 6 #"second"
0 0 49 3 18 #" (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 20 #"            (parse ("
0 0 49 3 5 #"third"
0 0 49 3 20 #" (s-exp->list s))))]"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 6 #"SYMBOL"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 3 #"]} "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 3 #"let"
0 0 49 3 20 #" ([bs (s-exp->list ("
0 0 49 3 5 #"first"
0 0 49 29 1 #"\n"
0 0 49 3 43 #"                             (s-exp->list ("
0 0 49 3 6 #"second"
0 0 49 29 1 #"\n"
0 0 49 3 64
#"                                           (s-exp->list s)))))])"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"       ("
0 0 49 3 4 #"appE"
0 0 49 3 2 #" ("
0 0 49 3 4 #"lamE"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 17 #" (s-exp->symbol ("
0 0 49 3 5 #"first"
0 0 49 3 6 #" bs)))"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"                   (parse ("
0 0 49 3 5 #"third"
0 0 49 3 19 #" (s-exp->list s))))"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"             ("
0 0 49 3 4 #"list"
0 0 49 3 9 #" (parse ("
0 0 49 3 6 #"second"
0 0 49 3 9 #" bs)))))]"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 6 #"SYMBOL"
0 0 49 3 1 #" "
0 0 49 3 3 #"..."
0 0 49 3 2 #"} "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 4 #"lamE"
0 0 49 3 2 #" ("
0 0 49 3 3 #"map"
0 0 49 3 28 #" s-exp->symbol (s-exp->list "
0 0 49 29 1 #"\n"
0 0 49 3 32 #"                               ("
0 0 49 3 6 #"second"
0 0 49 3 19 #" (s-exp->list s))))"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"           (parse ("
0 0 49 3 5 #"third"
0 0 49 3 20 #" (s-exp->list s))))]"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 6 #"SYMBOL"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 7 #"let/ccE"
0 0 49 3 17 #" (s-exp->symbol ("
0 0 49 3 6 #"second"
0 0 49 3 18 #" (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"              (parse ("
0 0 49 3 5 #"third"
0 0 49 3 20 #" (s-exp->list s))))]"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"..."
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 4 #"appE"
0 0 49 3 9 #" (parse ("
0 0 49 3 5 #"first"
0 0 49 3 18 #" (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"           ("
0 0 49 3 3 #"map"
0 0 49 3 8 #" parse ("
0 0 49 3 4 #"rest"
0 0 49 3 20 #" (s-exp->list s))))]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"else"
0 0 49 3 8 #" (error "
0 0 49 3 1 #"'"
0 0 49 3 5 #"parse"
0 0 49 3 20 #" \"invalid input\")]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (parse "
0 0 49 3 2 #"`2"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numE"
0 0 49 3 4 #" 2))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"x"
0 0 49 3 2 #") "
0 0 49 3 41 #"; note: backquote instead of normal quote"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 3 #"idE"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 5 #"plusE"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numE"
0 0 49 3 5 #" 2) ("
0 0 49 3 4 #"numE"
0 0 49 3 5 #" 1)))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 1 #" "
0 0 49 3 1 #"4"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 5 #"multE"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numE"
0 0 49 3 5 #" 3) ("
0 0 49 3 4 #"numE"
0 0 49 3 5 #" 4)))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 2 #" {"
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 1 #" "
0 0 49 3 1 #"4"
0 0 49 3 2 #"} "
0 0 49 3 1 #"8"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 5 #"plusE"
0 0 49 3 2 #" ("
0 0 49 3 5 #"multE"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numE"
0 0 49 3 5 #" 3) ("
0 0 49 3 4 #"numE"
0 0 49 3 4 #" 4))"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"               ("
0 0 49 3 4 #"numE"
0 0 49 3 5 #" 8)))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 1 #"x"
0 0 49 3 2 #" {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 3 #"}]}"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"                  "
0 0 49 3 1 #"y"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"appE"
0 0 49 3 2 #" ("
0 0 49 3 4 #"lamE"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 3 #"idE"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"              ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 5 #"plusE"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numE"
0 0 49 3 5 #" 1) ("
0 0 49 3 4 #"numE"
0 0 49 3 7 #" 2)))))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 2 #"} "
0 0 49 3 1 #"9"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"lamE"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numE"
0 0 49 3 5 #" 9)))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"0"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 7 #"let/ccE"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"k"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numE"
0 0 49 3 5 #" 0)))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"double"
0 0 49 3 1 #" "
0 0 49 3 1 #"9"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"appE"
0 0 49 3 2 #" ("
0 0 49 3 3 #"idE"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 6 #"double"
0 0 49 3 3 #") ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numE"
0 0 49 3 6 #" 9))))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 8 #" (parse "
0 0 49 3 1 #"`"
0 0 49 3 3 #"{})"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"            \"invalid input\"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 61
#";; interp & continue ----------------------------------------"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 10 #" (interp ["
0 0 49 3 1 #"a"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 3 #"] ["
0 0 49 3 3 #"env"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 3 #"] ["
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 2 #" a"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"numE"
0 0 49 3 17 #" n) (continue k ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" n))]"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 7 #";; negE"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"negE"
0 0 49 3 17 #" e) (interp e env"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"                      ("
0 0 49 3 6 #"doNegK"
0 0 49 3 5 #" k))]"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                      "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"idE"
0 0 49 3 32 #" s) (continue k (lookup s env))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 5 #"plusE"
0 0 49 3 19 #" l r) (interp l env"
0 0 49 29 1 #"\n"
0 0 49 3 26 #"                         ("
0 0 49 3 11 #"plusSecondK"
0 0 49 3 11 #" r env k))]"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 7 #";; avgE"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"avgE"
0 0 49 3 21 #" l m r) (interp l env"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"                          ("
0 0 49 3 10 #"avgSecondK"
0 0 49 3 13 #" m r env k))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 5 #"multE"
0 0 49 3 19 #" l r) (interp l env"
0 0 49 29 1 #"\n"
0 0 49 3 26 #"                         ("
0 0 49 3 11 #"multSecondK"
0 0 49 3 11 #" r env k))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"lamE"
0 0 49 3 9 #" ns body)"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"     (continue k ("
0 0 49 3 5 #"closV"
0 0 49 3 15 #" ns body env))]"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 7 #";; if0E"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"if0E"
0 0 49 3 13 #" tst thn els)"
0 0 49 29 1 #"\n"
0 0 49 3 20 #"     (interp tst env"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"             ("
0 0 49 3 4 #"if0K"
0 0 49 3 17 #" thn els env k))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"appE"
0 0 49 3 26 #" fun args) (interp fun env"
0 0 49 29 1 #"\n"
0 0 49 3 30 #"                             ("
0 0 49 3 7 #"appArgK"
0 0 49 3 14 #" args env k))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 7 #"let/ccE"
0 0 49 3 8 #" n body)"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"     (interp body"
0 0 49 29 1 #"\n"
0 0 49 3 26 #"             (extend-env ("
0 0 49 3 4 #"bind"
0 0 49 3 4 #" n ("
0 0 49 3 5 #"contV"
0 0 49 3 4 #" k))"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"                         env)"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"             k)]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 12 #" (continue ["
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 3 #"] ["
0 0 49 3 1 #"v"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 4 #"Cont"
0 0 49 3 2 #" k"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 5 #"doneK"
0 0 49 3 4 #") v]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 11 #"plusSecondK"
0 0 49 3 14 #" r env next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"     (interp r env"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"             ("
0 0 49 3 7 #"doPlusK"
0 0 49 3 12 #" v next-k))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 7 #"doPlusK"
0 0 49 3 12 #" v-l next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 36 #"     (continue next-k (num+ v-l v))]"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 15 #";; avg continue"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 10 #"avgSecondK"
0 0 49 3 16 #" m r env next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"     (interp m env"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"             ("
0 0 49 3 9 #"avgThirdK"
0 0 49 3 18 #" v r env next-k))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 9 #"avgThirdK"
0 0 49 3 18 #" v-l r env next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"     (interp r env"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"             ("
0 0 49 3 6 #"doAvgK"
0 0 49 3 16 #" v-l v next-k))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 6 #"doAvgK"
0 0 49 3 16 #" v-l v-m next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 21 #"     (continue next-k"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"               "
0 0 49 3 59
#";; take the sum of the first two values using num+ function"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"               "
0 0 49 3 47 #";; this returns a value which we add to r value"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"               "
0 0 49 3 59
#";; which is represented by the current v inthe continuation"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"               "
0 0 49 3 2 #";;"
0 0 49 29 1 #"\n"
0 0 49 3 45 #"               (num/ (num+ (num+ v-l v-m)v) ("
0 0 49 3 4 #"numV"
0 0 49 3 6 #" 3)))]"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 14 #"; neg continue"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 6 #"doNegK"
0 0 49 3 8 #" next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 2 #" v"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"       [("
0 0 49 3 4 #"numV"
0 0 49 3 3 #" n)"
0 0 49 29 1 #"\n"
0 0 49 3 26 #"        (continue next-k ("
0 0 49 3 4 #"numV"
0 0 49 3 12 #" (* -1 n)))]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"       ["
0 0 49 3 4 #"else"
0 0 49 3 9 #"  (error "
0 0 49 3 1 #"'"
0 0 49 3 6 #"interp"
0 0 49 3 16 #" \"not a neg\")])]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"     "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 11 #"multSecondK"
0 0 49 3 14 #" r env next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"     (interp r env"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"             ("
0 0 49 3 7 #"doMultK"
0 0 49 3 12 #" v next-k))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 7 #"doMultK"
0 0 49 3 12 #" v-l next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 36 #"     (continue next-k (num* v-l v))]"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 13 #"; if continue"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"if0K"
0 0 49 3 20 #" thn els env next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 2 #" v"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"       [("
0 0 49 3 4 #"numV"
0 0 49 3 3 #" n)"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 2 #"if"
0 0 49 3 10 #" (zero? n)"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"            (interp thn env ("
0 0 49 3 5 #"doIfK"
0 0 49 3 9 #" next-k))"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"            (interp els env ("
0 0 49 3 5 #"doIfK"
0 0 49 3 11 #" next-k)))]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"       ["
0 0 49 3 4 #"else"
0 0 49 3 8 #" (error "
0 0 49 3 1 #"'"
0 0 49 3 6 #"interp"
0 0 49 3 19 #" \"not a number\")])]"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 5 #"doIfK"
0 0 49 3 8 #" next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 25 #"     (continue next-k v)]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"     "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 7 #"appArgK"
0 0 49 3 14 #" a env next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 9 #"type-case"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 3 #") a"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"       ["
0 0 49 3 5 #"empty"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"        (continue ("
0 0 49 3 6 #"doAppK"
0 0 49 3 20 #" v empty next-k) v)]"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"       [("
0 0 49 3 4 #"cons"
0 0 49 3 9 #" fst rst)"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"        (interp fst env"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 13 #"continueListK"
0 0 49 3 28 #" rst v empty env next-k))])]"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 3 31 #";; define continue list variant"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 13 #"continueListK"
0 0 49 3 25 #" rst v-f vals env next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 9 #"type-case"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 5 #") rst"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"       ["
0 0 49 3 5 #"empty"
0 0 49 3 12 #" (continue ("
0 0 49 3 6 #"doAppK"
0 0 49 3 6 #" v-f ("
0 0 49 3 4 #"cons"
0 0 49 3 20 #" v vals) next-k) v)]"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"       [("
0 0 49 3 4 #"cons"
0 0 49 3 25 #" fst rst) (interp fst env"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"                               ("
0 0 49 3 13 #"continueListK"
0 0 49 3 10 #" rst v-f ("
0 0 49 3 4 #"cons"
0 0 49 3 24 #" v vals) env next-k))])]"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 6 #"doAppK"
0 0 49 3 17 #" v-f vals next-k)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 2 #"if"
0 0 49 3 5 #" (< ("
0 0 49 3 6 #"length"
0 0 49 3 9 #" vals) 1)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"         (error "
0 0 49 3 1 #"'"
0 0 49 3 6 #"interp"
0 0 49 3 26 #" \"less than one argument\")"
0 0 49 29 1 #"\n"
0 0 49 3 10 #"         ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 4 #" v-f"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 5 #"closV"
0 0 49 3 15 #" ns body c-env)"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 2 #"if"
0 0 49 3 12 #" (not (eq? ("
0 0 49 3 6 #"length"
0 0 49 3 8 #" vals) ("
0 0 49 3 6 #"length"
0 0 49 3 6 #" ns)))"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"                "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 6 #"interp"
0 0 50 3 21 #" \"non-matching args\")"
0 0 49 29 1 #"\n"
0 0 49 3 28 #"                (interp body"
0 0 49 29 1 #"\n"
0 0 49 3 36 #"                        (extend-env*"
0 0 49 29 1 #"\n"
0 0 49 3 26 #"                         ("
0 0 49 3 4 #"map2"
0 0 49 3 1 #" "
0 0 49 3 4 #"bind"
0 0 49 3 2 #" ("
0 0 49 3 7 #"reverse"
0 0 49 3 10 #" ns) vals)"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                         c-env)"
0 0 49 29 1 #"\n"
0 0 49 3 33 #"                        next-k))]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 5 #"contV"
0 0 49 3 5 #" k-v)"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 2 #"if"
0 0 49 3 12 #" (not (eq? ("
0 0 49 3 6 #"length"
0 0 49 3 10 #" vals) 1))"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"                (error "
0 0 49 3 1 #"'"
0 0 49 3 6 #"interp"
0 0 49 3 26 #" \"more than one argument\")"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                (continue k-v ("
0 0 49 3 5 #"first"
0 0 49 3 9 #" vals)))]"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"           ["
0 0 49 3 4 #"else"
0 0 49 3 8 #" (error "
0 0 49 3 1 #"'"
0 0 49 3 6 #"interp"
0 0 49 3 24 #" \"not a function\")]))]))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 2 #"`2"
0 0 49 3 10 #") mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 2))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"x"
0 0 49 3 10 #") mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 28 #"            \"free variable\")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"x"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"                (extend-env ("
0 0 49 3 4 #"bind"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numV"
0 0 49 3 12 #" 9)) mt-env)"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 9))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 11 #"}) mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 3))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 11 #"}) mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 2))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 2 #" {"
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 1 #" "
0 0 49 3 1 #"8"
0 0 49 3 3 #"}})"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                mt-env"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 19))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 3 #"}})"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                mt-env"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 5 #"closV"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 5 #"plusE"
0 0 49 3 2 #" ("
0 0 49 3 3 #"idE"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 3 #"idE"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 11 #")) mt-env))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 2 #"]}"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"                          {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 3 #"}})"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                mt-env"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 10))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 2 #"]}"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"                          {"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 1 #"x"
0 0 49 3 2 #" {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 3 #"}]}"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"                            {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 4 #"}}})"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                mt-env"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 12))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 2 #"]}"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"                          {"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 1 #"y"
0 0 49 3 1 #" "
0 0 49 3 1 #"6"
0 0 49 3 2 #"]}"
0 0 49 29 1 #"\n"
0 0 49 3 28 #"                            "
0 0 49 3 1 #"x"
0 0 49 3 3 #"}})"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                mt-env"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 5))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 2 #"{{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 3 #"}} "
0 0 49 3 1 #"8"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                mt-env"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 16))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 2 #" {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 2 #" {"
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"0"
0 0 49 3 4 #"}}})"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                mt-env"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 0))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 1 #"f"
0 0 49 3 2 #" {"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 3 #"}]}"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"                          {"
0 0 49 3 1 #"f"
0 0 49 3 2 #" {"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 2 #"} "
0 0 49 3 2 #"10"
0 0 49 3 4 #"}}})"
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                mt-env"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 10))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 11 #"}) mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"            \"not a function\")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 2 #" {"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 2 #"} "
0 0 49 3 1 #"x"
0 0 49 3 12 #"}}) mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"            \"not a number\")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 3 #"bad"
0 0 49 3 2 #" {"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 4 #"}}]}"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                              {"
0 0 49 3 3 #"let"
0 0 49 3 3 #" {["
0 0 49 3 1 #"y"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 2 #"]}"
0 0 49 29 1 #"\n"
0 0 49 3 33 #"                                {"
0 0 49 3 3 #"bad"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 4 #"}}})"
0 0 49 29 1 #"\n"
0 0 49 3 26 #"                    mt-env"
0 0 49 29 1 #"\n"
0 0 49 3 21 #"                    ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 28 #"            \"free variable\")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 9 #";; Eager:"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 16 #" (interp (parse "
0 0 49 3 1 #"`"
0 0 49 3 2 #"{{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 2 #"} "
0 0 49 3 1 #"0"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 12 #"}}) mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"            \"not a function\")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 12 #" (continue ("
0 0 49 3 5 #"doneK"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 5))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 5))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 12 #" (continue ("
0 0 49 3 11 #"plusSecondK"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numE"
0 0 49 3 12 #" 6) mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 4 #")) ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 5))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 11))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 12 #" (continue ("
0 0 49 3 7 #"doPlusK"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 7) ("
0 0 49 3 5 #"doneK"
0 0 49 3 4 #")) ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 5))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 12))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 12 #" (continue ("
0 0 49 3 11 #"multSecondK"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numE"
0 0 49 3 12 #" 6) mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 4 #")) ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 5))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 30))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 12 #" (continue ("
0 0 49 3 7 #"doMultK"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 7) ("
0 0 49 3 5 #"doneK"
0 0 49 3 4 #")) ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 5))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 6 #" 35)))"
0 0 49 29 1 #"\n"
0 9         217 49           0 0           0 35 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 7 #"appArgK"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numE"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 14 3 6 #"mt-env"
0 0 24 3 2 #" ("
0 0 14 3 5 #"doneK"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"closV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"idE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 6 #"mt-env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0           0 0 0 49 29 1 #"\n"
0 9         205 49           0 0           0 33 0 24 3 3 #"  ("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 6 #"doAppK"
0 0 24 3 2 #" ("
0 0 14 3 5 #"closV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"idE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 6 #"mt-env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"doneK"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")))"
0           0 0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 66
#";; num+ and num* and num/ ----------------------------------------"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 10 #" (num-op ["
0 0 49 3 2 #"op"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Number"
0 0 49 3 1 #" "
0 0 49 3 6 #"Number"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 6 #"Number"
0 0 49 3 4 #")] ["
0 0 49 3 1 #"l"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"] ["
0 0 49 3 1 #"r"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"and"
0 0 49 3 21 #" (numV? l) (numV? r))"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 4 #"numV"
0 0 49 3 29 #" (op (numV-n l) (numV-n r)))]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"else"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"     (error "
0 0 49 3 1 #"'"
0 0 49 3 6 #"interp"
0 0 49 3 19 #" \"not a number\")]))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 8 #" (num+ ["
0 0 49 3 1 #"l"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"] ["
0 0 49 3 1 #"r"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"  (num-op + l r))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 8 #" (num* ["
0 0 49 3 1 #"l"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"] ["
0 0 49 3 1 #"r"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"  (num-op * l r))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 8 #" (num/ ["
0 0 49 3 1 #"l"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"] ["
0 0 49 3 1 #"r"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"  (num-op / l r))"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 13 #" (num-zero? ["
0 0 49 3 1 #"v"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"Boolean"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 2 #" v"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"numV"
0 0 49 3 14 #" n) (zero? n)]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"else"
0 0 49 3 8 #" (error "
0 0 49 3 1 #"'"
0 0 49 3 6 #"interp"
0 0 49 3 19 #" \"not a number\")]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (num+ ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 1) ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 2))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 3))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (num* ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 2) ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 3))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 6))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 8 #" (num/ ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 4) ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 2))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 2))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 13 #" (num-zero? ("
0 0 49 3 5 #"contV"
0 0 49 3 2 #" ("
0 0 49 3 5 #"doneK"
0 0 49 3 3 #")))"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"            \"not a number\")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 13 #" (num-zero? ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 0))"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"        #t)"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 13 #" (num-zero? ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 1))"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"        #f))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 50 #";; lookup ----------------------------------------"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 10 #" (lookup ["
0 0 49 3 1 #"n"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 3 #"] ["
0 0 49 3 3 #"env"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"Binding"
0 0 49 3 5 #") env"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 5 #"empty"
0 0 49 3 8 #" (error "
0 0 49 3 1 #"'"
0 0 49 3 6 #"lookup"
0 0 49 3 18 #" \"free variable\")]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"cons"
0 0 49 3 13 #" b rst-env) ("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 51 #"                        [(symbol=? n (bind-name b))"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                         (bind-val b)]"
0 0 49 29 1 #"\n"
0 0 49 3 25 #"                        ["
0 0 49 3 4 #"else"
0 0 49 3 24 #" (lookup n rst-env)])]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 9 #" (lookup "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 8 #" mt-env)"
0 0 49 29 1 #"\n"
0 0 49 3 28 #"            \"free variable\")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 9 #" (lookup "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 14 #" (extend-env ("
0 0 49 3 4 #"bind"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numV"
0 0 49 3 13 #" 8)) mt-env))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 8))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 9 #" (lookup "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 12 #" (extend-env"
0 0 49 29 1 #"\n"
0 0 49 3 21 #"                    ("
0 0 49 3 4 #"bind"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 9))"
0 0 49 29 1 #"\n"
0 0 49 3 33 #"                    (extend-env ("
0 0 49 3 4 #"bind"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numV"
0 0 49 3 14 #" 8)) mt-env)))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 9))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 9 #" (lookup "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 12 #" (extend-env"
0 0 49 29 1 #"\n"
0 0 49 3 21 #"                    ("
0 0 49 3 4 #"bind"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 9))"
0 0 49 29 1 #"\n"
0 0 49 3 33 #"                    (extend-env ("
0 0 49 3 4 #"bind"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numV"
0 0 49 3 14 #" 8)) mt-env)))"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"numV"
0 0 49 3 5 #" 8)))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"; interp-expr"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 15 #" (interp-expr ["
0 0 49 3 1 #"e"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Exp"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"S-Exp"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 19 #" (interp e mt-env ("
0 0 49 3 5 #"doneK"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"numV"
0 0 49 3 22 #" n) (number->s-exp n)]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 5 #"closV"
0 0 49 3 15 #" arg body env) "
0 0 49 3 1 #"`"
0 0 49 3 8 #"function"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 5 #"contV"
0 0 49 3 4 #" k) "
0 0 49 3 1 #"`"
0 0 49 3 8 #"function"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 20 #";; interp-expr tests"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 2 #"} "
0 0 49 3 1 #"x"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"`"
0 0 49 3 8 #"function"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"`"
0 0 49 3 8 #"function"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 34 #";;not a number and not a neg cases"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"neg"
0 0 49 3 2 #" {"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 4 #"}}))"
0 0 49 29 1 #"\n"
0 0 49 3 24 #"            \"not a neg\")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"if0"
0 0 49 3 2 #" {"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 2 #"} "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 28 #"            \"not a number\"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 15 #";; Part 1 Tests"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"neg"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 3 #"`-2"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"avg"
0 0 49 3 1 #" "
0 0 49 3 1 #"0"
0 0 49 3 1 #" "
0 0 49 3 1 #"6"
0 0 49 3 1 #" "
0 0 49 3 1 #"6"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 2 #"`4"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 2 #" {"
0 0 49 3 3 #"neg"
0 0 49 3 2 #" {"
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 5 #"}}}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 2 #"`3"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 2 #" {"
0 0 49 3 3 #"avg"
0 0 49 3 1 #" "
0 0 49 3 1 #"0"
0 0 49 3 2 #" {"
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 2 #"} "
0 0 49 3 1 #"0"
0 0 49 3 4 #"}}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 2 #"`3"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 2 #" {"
0 0 49 3 3 #"avg"
0 0 49 3 2 #" {"
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 2 #"} "
0 0 49 3 1 #"0"
0 0 49 3 4 #"}}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 2 #"`2"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"if0"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 2 #"`3"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 3 #"if0"
0 0 49 3 1 #" "
0 0 49 3 1 #"0"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 2 #"`2"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 2 #" {"
0 0 49 3 3 #"if0"
0 0 49 3 2 #" {"
0 0 49 3 1 #"k"
0 0 49 3 1 #" "
0 0 49 3 1 #"9"
0 0 49 3 2 #"} "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 4 #"}}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 2 #"`9"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 2 #"{{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 2 #" {"
0 0 49 3 3 #"neg"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 4 #"}}} "
0 0 49 3 2 #"10"
0 0 49 3 1 #" "
0 0 49 3 2 #"12"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 2 #"`2"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"lambda"
0 0 49 3 4 #" {} "
0 0 49 3 2 #"12"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"`"
0 0 49 3 8 #"function"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 6 #"lambda"
0 0 49 3 4 #" {} "
0 0 49 3 1 #"x"
0 0 49 3 4 #"}}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 1 #"`"
0 0 49 3 8 #"function"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 3 #"{{{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 6 #"lambda"
0 0 49 3 4 #" {} "
0 0 49 3 1 #"x"
0 0 49 3 3 #"}} "
0 0 49 3 2 #"13"
0 0 49 3 4 #"}}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 3 #"`13"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 3 #"esc"
0 0 49 3 3 #" {{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 2 #"} "
0 0 49 3 1 #"x"
0 0 49 3 2 #"} "
0 0 49 3 1 #"1"
0 0 49 3 2 #" {"
0 0 49 3 3 #"esc"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 5 #"}}}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 2 #"`3"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 2 #"{{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 3 #"esc"
0 0 49 3 3 #" {{"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 3 #"} {"
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" {"
0 0 49 3 1 #"z"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"z"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 3 #"}}}"
0 0 49 29 1 #"\n"
0 0 49 3 43 #"                                           "
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 44 #"                                           {"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 2 #" {"
0 0 49 3 3 #"esc"
0 0 49 3 1 #" "
0 0 49 3 1 #"k"
0 0 49 3 4 #"}}}}"
0 0 49 29 1 #"\n"
0 0 49 3 30 #"                              "
0 0 49 3 2 #"10"
0 0 49 3 3 #"}))"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 49 3 3 #"`20"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 3 #"esc"
0 0 49 3 2 #" {"
0 0 49 3 3 #"esc"
0 0 49 3 4 #"}}))"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 51 #";; error because continuation is given 0 arguments,"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 50 #";; but the specific error message is not specified"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"            \"\")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 8 #"test/exn"
0 0 49 3 21 #" (interp-expr (parse "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 6 #"let/cc"
0 0 49 3 1 #" "
0 0 49 3 3 #"esc"
0 0 49 3 2 #" {"
0 0 49 3 3 #"esc"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 4 #"}}))"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 49 3 50 #";; error because continuation is given 2 arguments"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"            \"\")"
0 0 49 29 1 #"\n"
0           0
